AWSTemplateFormatVersion: "2010-09-09"
Description: AWS CloudFormation template for dynamic Cloud 9 setups. Creates a Cloud9 instance and bootstraps it.

Parameters:
  ExampleC9InstanceType:
    Description: Example Cloud9 instance type
    Type: String
    Default: t3.small
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
      - t3.medium
    ConstraintDescription: Must be a valid Cloud9 instance type
  ExampleC9EnvType:
    Description: Environment type.
    Default: self
    Type: String
    AllowedValues:
      - self
      - 3rdParty
    ConstraintDescription: must specify self or 3rdParty.
  ExampleOwnerArn:
    Type: String
    Description: The Arn of the Cloud9 Owner to be set if 3rdParty deployment.
    Default: ""
  ExampleC9InstanceVolumeSize:
    Type: Number
    Description: The Size in GB of the Cloud9 Instance Volume.
    Default: 15

Conditions:
  Create3rdPartyResources: !Equals [!Ref ExampleC9EnvType, 3rdParty]

Resources:
  ################## PERMISSIONS AND ROLES #################
  SoloSSMInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Environment
          Value: Solo Workshop
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: "/"
      Policies:
        - PolicyName: SoloSSMPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:DescribeAssociation"
                  - "ec2:CreateRoute"
                  - "iam:DetachRolePolicy"
                  - "ec2:AttachInternetGateway"
                  - "iam:CreateRole"
                  - "ec2:RunInstances"
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeLaunchTemplates"
                  - "ec2:DescribeLaunchTemplateVersions"
                  - "iam:AttachRolePolicy"
                  - "ec2:CreateSecurityGroup"
                  - "eks:DescribeNodegroup"
                  - "iam:ListAttachedRolePolicies"
                  - "ec2:DeleteLaunchTemplate"
                  - "ec2:CreateVpc"
                  - "ec2:AssociateRouteTable"
                  - "eks:CreateNodegroup"
                  - "ec2:CreateLaunchTemplate"
                  - "ec2:CreateNatGateway"
                  - "ec2:DescribeNatGateways"
                  - "cloudFormation:ListStacks"
                  - "cloudformation:DescribeStacks"
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:ModifyVpcAttribute"
                  - "ec2:AllocateAddress"
                  - "iam:GetRole"
                  - "eks:TagResource"
                  - "ec2:DescribeAddresses"
                  - "ec2:ModifySubnetAttribute"
                  - "ec2:CreateInternetGateway"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:CreateSubnet"
                  - "ec2:CreateRouteTable"
                  - "ec2:DescribeSecurityGroups"
                  - "ssm:GetDeployablePatchSnapshotForInstance"
                  - "ssm:GetDocument"
                  - "ssm:DescribeDocument"
                  - "ec2:DescribeInstanceTypeOfferings"
                  - "ssm:GetManifest"
                  - "cloudformation:CreateStack"
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                  - "ec2:DescribeInternetGateways"
                  - "ssm:ListAssociations"
                  - "ssm:ListInstanceAssociations"
                  - "ssm:PutInventory"
                  - "ssm:PutComplianceItems"
                  - "ssm:PutConfigurePackageResult"
                  - "ssm:UpdateAssociationStatus"
                  - "ssm:UpdateInstanceAssociationStatus"
                  - "ssm:UpdateInstanceInformation"
                  - "ssm:SendCommand"
                  - "ssm:ListCommands"
                  - "iam:TagRole"
                  - "ec2:CreateTags"
                  - "ssm:ListCommandInvocations"
                  - "ssm:GetCommandInvocation"
                  - "ssm:DescribeInstanceInformation"
                  - "ec2:DescribeAvailabilityZones"
                  - "eks:CreateCluster"
                  - "eks:DescribeCluster"
                  - "ec2:DescribeVpcs"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeRouteTables"
                  - "iam:ListRoles"
                  - "iam:PassRole"
                  - "ec2:DescribeLaunchTemplates"
                  - "ec2:DescribeLaunchTemplateVersions"
                  - "ec2:CreateLaunchTemplateVersion"
                  - "ssmmessages:CreateControlChannel"
                  - "ssmmessages:CreateDataChannel"
                  - "ssmmessages:OpenControlChannel"
                  - "ssmmessages:OpenDataChannel"
                  - "ec2messages:AcknowledgeMessage"
                  - "ec2messages:DeleteMessage"
                  - "ec2messages:FailMessage"
                  - "ec2messages:GetEndpoint"
                  - "ec2messages:GetMessages"
                  - "ec2messages:SendReply"
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  ExampleC9LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName:
            Fn::Join:
              - ""
              - - ExampleC9LambdaPolicy-
                - Ref: AWS::Region
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - ec2:DescribeInstances
                  - ec2:AssociateIamInstanceProfile
                  - ec2:ModifyInstanceAttribute
                  - ec2:ReplaceIamInstanceProfileAssociation
                  - ec2:RebootInstances
                  - iam:ListInstanceProfiles
                  - iam:PassRole
                Resource: "*"

  ################## LAMBDA BOOTSTRAP FUNCTION ################
  ExampleC9BootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: Environment
          Value: AWS Example
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - ExampleC9LambdaExecutionRole
          - Arn
      Runtime: python3.9
      MemorySize: 256
      Timeout: 900 # Increased timeout to 15 minutes
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import botocore
          import json
          import os
          import time
          import traceback
          import cfnresponse

          def lambda_handler(event, context):
              responseData = {}
              status = cfnresponse.SUCCESS
              
              if event['RequestType'] == 'Delete':
                  responseData = {'Success': 'Custom Resource removed'}
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')              

              if event['RequestType'] == 'Create':
                  try:
                      ec2 = boto3.client('ec2')
                      instance = ec2.describe_instances(Filters=[{'Name': 'tag:Name','Values': ['aws-cloud9-'+event['ResourceProperties']['StackName']+'-'+event['ResourceProperties']['EnvironmentId']]}])['Reservations'][0]['Instances'][0]
                      iam_instance_profile = {
                          'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn'],
                          'Name': event['ResourceProperties']['LabIdeInstanceProfileName']
                      }
                      instance_state = instance['State']['Name']
                      while instance_state != 'running':
                          time.sleep(5)
                          instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])['Reservations'][0]['Instances'][0]['State']['Name']
                      try:
                          response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance['InstanceId'])
                          ec2.reboot_instances(InstanceIds=[instance['InstanceId']], DryRun=False)
                      except botocore.exceptions.ClientError as error:
                          if error.response['Error']['Code'] == 'IncorrectState' and f"There is an existing association for instance {instance['InstanceId']}" == error.response['Error']['Message']:
                              pass
                          else:
                              raise error
                      responseData = {'Success': 'Started bootstrapping for instance: '+instance['InstanceId']}
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
                      
                  except Exception as e:
                      status = cfnresponse.FAILED
                      print(traceback.format_exc())
                      responseData = {'Error': traceback.format_exc()}
                  finally:
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')

  ExampleC9BootstrapInstanceLambda:
    Type: Custom::ExampleC9BootstrapInstanceLambda
    DependsOn:
      - ExampleC9BootstrapInstanceLambdaFunction
      - ExampleC9Instance
      - ExampleC9InstanceProfile
      - ExampleC9LambdaExecutionRole
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - ExampleC9BootstrapInstanceLambdaFunction
          - Arn
      REGION:
        Ref: AWS::Region
      StackName:
        Ref: AWS::StackName
      EnvironmentId:
        Ref: ExampleC9Instance
      LabIdeInstanceProfileName:
        Ref: ExampleC9InstanceProfile
      LabIdeInstanceProfileArn:
        Fn::GetAtt:
          - ExampleC9InstanceProfile
          - Arn

  ################## SSM BOOTSTRAP HANDLER ###############
  ExampleC9OutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  SoloC9InstanceDocument:
    Type: AWS::SSM::Document
    Properties:
      Tags:
        - Key: Environment
          Value: AWS Example
      DocumentType: Command
      DocumentFormat: YAML
      Content:
        schemaVersion: "2.2"
        description: Bootstrap Cloud9 Instance
        mainSteps:
          - action: aws:runShellScript
            name: ExampleC9bootstrap
            inputs:
              runCommand:
                - "#!/bin/bash"
                - date
                - touch /etc/environment
                - echo LANG=en_US.utf-8 >> /etc/environment"
                - echo LC_ALL=en_US.UTF-8 >> /etc/environment"
                - . /home/ec2-user/.bashrc
                - yum -y remove aws-cli; yum -y --allowerasing install sqlite telnet jq strace tree gcc glibc-static python3 python3-pip gettext bash-completion
                - echo '=== INSTALL yq ==='
                - wget https://github.com/mikefarah/yq/releases/download/v4.15.1/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq
                - echo '=== CONFIGURE default python version ==='
                - export PATH=$PATH:/usr/bin
                - echo '=== INSTALL and CONFIGURE default software components ==='
                - sudo -H -u ec2-user bash -c \"pip install --user -U boto boto3 botocore awscli\"
                - echo '=== Resizing the Instance volume'
                - !Sub SIZE=${ExampleC9InstanceVolumeSize}
                - !Sub REGION=${AWS::Region}
                - mkdir /home/ec2-user/.aws
                - echo '[default]' > /home/ec2-user/.aws/config
                - echo 'output = json' >> /home/ec2-user/.aws/config
                - chmod 600 /home/ec2-user/.aws/config && chmod 600 /home/ec2-user/.aws/credentials
                - echo 'PATH=$PATH:/usr/local/bin' >> /home/ec2-user/.bashrc
                - echo 'export PATH' >> /home/ec2-user/.bashrc
                - echo '=== CLEANING /home/ec2-user ==='
                - yum update -y
                - yum install -y jq
                - curl -sSL https://dl.k8s.io/release/$(curl -sSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl
                - chmod +x /usr/local/bin/kubectl
                - echo 'Downloading eksctl...'
                - curl -sL https://github.com/weaveworks/eksctl/releases/download/v0.181.0/eksctl_Linux_amd64.tar.gz -o /tmp/eksctl_Linux_amd64.tar.gz
                - echo 'Extracting eksctl...'
                - tar xz -C /tmp -f /tmp/eksctl_Linux_amd64.tar.gz || { echo \"Failed to download and extract eksctl\"; exit 1; }
                - wait
                - mv /tmp/eksctl /usr/local/bin
                - chmod +x /usr/local/bin/eksctl
                - echo 'Installation of curl, eksctl, and kubectl complete'
                - export EKS_VERSION=1.29
                - export NUMBER_NODES=3
                - export NODE_TYPE='c7i.xlarge'
                - export CLUSTER_NAME=solo-io-gloo-mesh-workshop-1
                - eksctl create cluster --region $REGION --name $CLUSTER_NAME --nodes $NUMBER_NODES --node-type $NODE_TYPE --version=$EKS_VERSION || { echo \"Failed to create cluster solo-io-gloo-mesh-workshop-1\"; exit 1; }
                - export CLUSTER_NAME=solo-io-gloo-mesh-workshop-2
                - eksctl create cluster --region $REGION --name $CLUSTER_NAME --nodes $NUMBER_NODES --node-type $NODE_TYPE --version=$EKS_VERSION || { echo \"Failed to create cluster solo-io-gloo-mesh-workshop-2\"; exit 1; }
                - for f in cloud9; do rm -rf /home/ec2-user/$f; done
                - chown -R ec2-user:ec2-user /home/ec2-user/
                - echo '=== PREPARE REBOOT in 1 minute with at ==='
                - FILE=$(mktemp) && echo $FILE && echo '#!/bin/bash' > $FILE && echo 'reboot -f --verbose' >> $FILE && at now + 1 minute -f $FILE
                - echo 'Bootstrap completed with return code $?'

  ExampleC9BootstrapAssociation:
    Type: AWS::SSM::Association
    DependsOn: ExampleC9OutputBucket
    Properties:
      Name: !Ref SoloC9InstanceDocument
      OutputLocation:
        S3Location:
          OutputS3BucketName: !Ref ExampleC9OutputBucket
          OutputS3KeyPrefix: bootstrapoutput
      Targets:
        - Key: tag:SSMBootstrap
          Values:
            - Active

  ################## INSTANCE #####################
  ExampleC9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: SoloSSMInstanceRole

  ExampleC9Instance:
    Description: "-"
    DependsOn: ExampleC9BootstrapAssociation
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: AWS Cloud9 instance for Examples
      AutomaticStopTimeMinutes: 3600
      ImageId: amazonlinux-2023-x86_64
      InstanceType:
        Ref: ExampleC9InstanceType
      Name:
        Ref: AWS::StackName
      OwnerArn:
        !If [Create3rdPartyResources, !Ref ExampleOwnerArn, !Ref "AWS::NoValue"]
      Tags:
        - Key: SSMBootstrap
          Value: Active
        - Key: Environment
          Value: AWS Example

Outputs:
  Cloud9IDE:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: AWS::Region
          - ".console.aws.amazon.com/cloud9/ide/"
          - Ref: ExampleC9Instance
          - "?region="
          - Ref: AWS::Region
